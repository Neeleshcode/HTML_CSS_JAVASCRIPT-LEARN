 *{
    color: black;
}
/* universal selector */

/* color property ---1.namw,2.Hex value #000000--black,#ffffff--white,3.)rgba - red green blue opacity(0-1) */

.heading{
    background-color: red;
    color: blue;
    font-size: 20px;
}

.paragraph{
    text-align: center;
}

/* .className{
    //properties
} */

h1{
    color: brown;
} 

.font-styles {
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    font-style: italic;
    font-weight: bolder;
    text-decoration: underline;
    font-size: 50px;
}

.orange {
    text-align: center;
    background-color: orange;
    line-height: 2;
    letter-spacing: 4px;
    word-spacing: 20px;
}

ul{
    list-style-type: square;
}
/* color can be name,color code ---hexcode,rgba */
.box-model{
    /* border specify the border of a box-model */
    border: 1px solid red;
    height: 50px;
    width: 400px;
    /* padding can be given in all the four direction, its basically spacing from content to border */
    padding: 20px;
    /* margin is the space from the ohter boxes */
    margin: 20px;
}

/* cascade */

h2{
    color: red; 
}

h2{
    color: blue;
}
/* when two rule apply that have equal specificity the one that comes in last in the css is the one that will be used */

/* Specificity */
/* specificity is how the browser decide which rule applies if multiple rule have different selector but apply to the same element */
/* d/f selectors have d/f specificity */
/* 1. element selector have a least specificity.
2. class selector have more specificity than element.
3. id selector have more specificity than the class selector.
4. inline have more specificity than all the above.

5. when we add important keyword to a specific property it becomes more specific. */

.sub-heading{
    color: blue;
}

h3{
    color: red !important;
}

#title{
    color: orange;
}

.Inheritance{
    color: orange;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 30px;
}

/* styling in table */
th,td{
    border: 1px solid black;
    /* text-align: center;
    height: 50px; */

    padding: 15px;
}

table{
    border-collapse: collapse;
    width: 60%;
}
td{
    text-align: center;
}

/*  */
/* basically converting block into inline and viceversa 
if(userisallowed){
    style --- display-block;
}else{
    style --- display--none;
}

/* terniary operator */

/* userisallowed === true ? style --- diaplay-block/inline : style --- display--none */

*/

.content-1{
    border: 1px solid red;
    display: none;

    /* display: inline; */
}

.content-2{
    border: 1px solid blue;
    display: block;
}

.Position-1{
    border: 1px solid red;
    background-color: aqua;
    position: sticky;
    top: 50px;
    left: 50px;
    /* bottom,right */
    /* note--it must be noted that position content 2 is not moved or adjusted to fit a gap created by the position 1 element. */

    /* position: static; by default it has an property of static so its not changing */
    /*  */
}

.Position-2{
    border: 1px solid blue;
    background-color: bisque;
    position: fixed;
    bottom: 0px;
    right: 0px;
}

.grid-container {
    display: grid;
    /* grid-template -columns: 2fr 1fr; */
    grid-template-columns: 2fr 1fr;
}

.grid-item-1{
    background-color: red;
}

.grid-item-2{
    background-color: yellow;
}

.grid-item-3{
    background-color: green;
}